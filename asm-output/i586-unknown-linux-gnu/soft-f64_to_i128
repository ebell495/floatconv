floatconv::soft::f64_to_i128:
 push    ebp
 push    ebx
 push    edi
 push    esi
 sub     esp, 16
 mov     eax, dword, ptr, [esp, +, 36]
 mov     ebp, dword, ptr, [esp, +, 44]
 mov     edx, ebp
 and     edx, 2147483647
 mov     ecx, edx
 shr     ecx, 20
 cmp     ecx, 1023
 jae     <label>
 xor     ecx, ecx
 xor     edx, edx
 xor     esi, esi
 xor     edi, edi
 jmp     <label>
<label>:
 mov     ebx, dword, ptr, [esp, +, 40]
 mov     ecx, edx
 shr     ecx, 21
 cmp     ecx, 575
 jae     <label>
 mov     esi, ebp
 shld    esi, ebx, 11
 shl     ebx, 11
 or      esi, -2147483648
 mov     eax, ebp
 shr     eax, 20
 mov     dl, 126
 sub     dl, al
 mov     eax, ebx
 mov     ecx, edx
 shrd    eax, esi, cl
 mov     dword, ptr, [esp, +, 4], eax
 mov     eax, esi
 shr     eax, cl
 xor     edi, edi
 test    dl, 32
 je      <label>
 mov     dword, ptr, [esp, +, 4], eax
 xor     eax, eax
<label>:
 and     dl, 127
 mov     ch, dl
 sub     ch, 64
 jb      <label>
 xor     eax, eax
<label>:
 mov     dword, ptr, [esp, +, 12], eax
 mov     cl, dl
 add     cl, -64
 mov     eax, ebx
 shrd    eax, esi, cl
 mov     dword, ptr, [esp], eax
 mov     eax, esi
 shr     eax, cl
 test    cl, 32
 je      <label>
 mov     dword, ptr, [esp], eax
 xor     eax, eax
<label>:
 neg     ch
 mov     cl, ch
 shld    esi, ebx, cl
 shl     ebx, cl
 test    ch, 32
 jne     <label>
 cmp     dl, 64
 jb      <label>
<label>:
 mov     dword, ptr, [esp, +, 4], 0
 mov     ebx, dword, ptr, [esp]
 mov     esi, eax
 test    dl, dl
 mov     eax, 0
 mov     ecx, 0
 jne     <label>
 jmp     <label>
<label>:
 cmp     ebx, 1
 sbb     edx, 2146435072
 jae     <label>
 shr     ebp, 31
 xor     edi, edi
 add     ebp, -1
 mov     edx, 0
 adc     edx, -1
 mov     esi, 0
 adc     esi, -1
 adc     edi, 2147483647
 mov     ecx, ebp
 jmp     <label>
<label>:
 mov     esi, ebx
 xor     ebx, ebx
 cmp     dl, 64
 jae     <label>
<label>:
 test    dl, dl
 mov     eax, 0
 mov     ecx, 0
 je      <label>
<label>:
 mov     eax, esi
 mov     ecx, ebx
<label>:
 mov     dword, ptr, [esp, +, 8], ecx
 neg     ecx
 mov     edx, 0
 mov     dword, ptr, [esp], eax
 sbb     edx, eax
 mov     esi, 0
 mov     ebx, dword, ptr, [esp, +, 4]
 sbb     esi, ebx
 mov     eax, dword, ptr, [esp, +, 12]
 sbb     edi, eax
 test    ebp, ebp
 js      <label>
 mov     ecx, dword, ptr, [esp, +, 8]
 mov     edx, dword, ptr, [esp]
 mov     esi, ebx
 mov     edi, eax
 jmp     <label>
<label>:
 xor     ecx, ecx
 xor     edx, edx
 xor     esi, esi
 xor     edi, edi
<label>:
 mov     eax, dword, ptr, [esp, +, 36]
<label>:
 mov     dword, ptr, [eax], ecx
 mov     dword, ptr, [eax, +, 4], edx
 mov     dword, ptr, [eax, +, 8], esi
 mov     dword, ptr, [eax, +, 12], edi
 add     esp, 16
 pop     esi
 pop     edi
 pop     ebx
 pop     ebp
 ret     4
