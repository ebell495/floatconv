floatconv::soft::u128_to_f32:
 push    ebp
 push    ebx
 push    edi
 push    esi
 sub     esp, 16
 mov     edi, dword, ptr, [esp, +, 44]
 mov     ebx, dword, ptr, [esp, +, 48]
 test    ebx, ebx
 jne     <label>
 bsr     edx, edi
 xor     edx, 31
 add     edx, 32
 mov     ebp, dword, ptr, [esp, +, 40]
 bsr     esi, dword, ptr, [esp, +, 36]
 mov     ecx, 63
 jne     <label>
 jmp     <label>
<label>:
 bsr     edx, ebx
 xor     edx, 31
 mov     ebp, dword, ptr, [esp, +, 40]
 bsr     esi, dword, ptr, [esp, +, 36]
 mov     ecx, 63
 je      <label>
<label>:
 mov     ecx, esi
<label>:
 test    ebp, ebp
 jne     <label>
 xor     ecx, 31
 add     ecx, 32
 mov     esi, edi
 or      esi, ebx
 je      <label>
 jmp     <label>
<label>:
 bsr     ecx, ebp
 xor     ecx, 31
 mov     esi, edi
 or      esi, ebx
 jne     <label>
<label>:
 add     ecx, 64
 mov     edx, ecx
<label>:
 mov     ebx, edi
 mov     ecx, edx
 shl     ebx, cl
 mov     edi, dword, ptr, [esp, +, 36]
 mov     esi, edi
 shl     esi, cl
 mov     eax, ebp
 shld    eax, edi, cl
 test    dl, 32
 mov     dword, ptr, [esp, +, 8], ebx
 jne     <label>
 mov     dword, ptr, [esp], ebx
 jmp     <label>
<label>:
 mov     eax, esi
 mov     dword, ptr, [esp], 0
 xor     esi, esi
<label>:
 mov     dword, ptr, [esp, +, 12], eax
 mov     bh, dl
 and     bh, 127
 mov     ch, bh
 sub     ch, 64
 jb      <label>
 xor     esi, esi
<label>:
 neg     ch
 mov     edi, ebp
 mov     cl, ch
 shr     edi, cl
 mov     eax, ebp
 mov     ebp, dword, ptr, [esp, +, 36]
 shrd    ebp, eax, cl
 test    ch, 32
 mov     eax, edi
 jne     <label>
 mov     eax, ebp
<label>:
 mov     dword, ptr, [esp, +, 4], eax
 mov     bl, bh
 add     bl, -64
 mov     ebp, dword, ptr, [esp, +, 36]
 mov     cl, bl
 shl     ebp, cl
 test    bl, 32
 mov     eax, 0
 jne     <label>
 mov     eax, ebp
<label>:
 cmp     bh, 64
 jb      <label>
 mov     dword, ptr, [esp, +, 12], 0
 mov     dword, ptr, [esp], eax
 test    ch, 32
 mov     eax, 0
 je      <label>
 jmp     <label>
<label>:
 mov     eax, dword, ptr, [esp]
 or      eax, dword, ptr, [esp, +, 4]
 mov     dword, ptr, [esp], eax
 test    ch, 32
 mov     eax, 0
 jne     <label>
<label>:
 mov     eax, edi
<label>:
 mov     dword, ptr, [esp, +, 4], eax
 mov     edi, dword, ptr, [esp, +, 48]
 mov     ecx, edx
 mov     eax, dword, ptr, [esp, +, 44]
 shld    edi, eax, cl
 test    dl, 32
 jne     <label>
 mov     dword, ptr, [esp, +, 8], edi
<label>:
 mov     edi, dword, ptr, [esp, +, 40]
 mov     ecx, ebx
 mov     eax, dword, ptr, [esp, +, 36]
 shld    edi, eax, cl
 test    bl, 32
 je      <label>
 cmp     bh, 64
 jb      <label>
<label>:
 mov     ecx, dword, ptr, [esp, +, 44]
 test    bh, bh
 mov     ebx, dword, ptr, [esp, +, 48]
 je      <label>
<label>:
 mov     ebx, ebp
 mov     ecx, dword, ptr, [esp]
<label>:
 mov     ebp, ebx
 shld    ebp, ecx, 24
 or      esi, ecx
 mov     edi, ebx
 shr     edi, 8
 xor     ecx, ecx
 or      esi, dword, ptr, [esp, +, 12]
 setne   cl
 or      ecx, ebp
 shr     ebx, 7
 mov     esi, edi
 not     esi
 and     esi, ebx
 and     esi, 1
 sub     ecx, esi
 mov     esi, dword, ptr, [esp, +, 40]
 or      esi, dword, ptr, [esp, +, 48]
 or      eax, dword, ptr, [esp, +, 44]
 shr     ecx, 31
 or      eax, esi
 mov     eax, 0
 je      <label>
 shl     edx, 23
 mov     eax, 2122317824
 sub     eax, edx
<label>:
 add     eax, edi
 add     eax, ecx
 add     esp, 16
 pop     esi
 pop     edi
 pop     ebx
 pop     ebp
 ret
<label>:
 mov     ebp, edi
 cmp     bh, 64
 jae     <label>
<label>:
 mov     ebp, dword, ptr, [esp, +, 8]
 or      ebp, dword, ptr, [esp, +, 4]
 mov     ecx, dword, ptr, [esp, +, 44]
 test    bh, bh
 mov     ebx, dword, ptr, [esp, +, 48]
 jne     <label>
 jmp     <label>
