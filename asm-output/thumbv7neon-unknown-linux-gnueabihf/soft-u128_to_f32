floatconv::soft::u128_to_f32:
 push.w  {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 sub     sp, #8
 mov     r6, r3
 mov     r3, r2
 clz     r7, r3
 cmp     r6, #0
 add.w   r12, r7, #32
 clz     r7, r0
 mov     r2, r1
 str     r6, [sp, #4]
 it      ne
 clzne   r12, r6
 adds    r7, #32
 cmp     r2, #0
 it      ne
 clzne   r7, r2
 orrs    r6, r3
 it      eq
 addeq.w r12, r7, #64
 and     lr, r12, #127
 mov     r1, r0
 rsb.w   r10, lr, #64
 rsbs.w  r11, lr, #32
 rsb.w   r4, r10, #32
 sub.w   r9, lr, #64
 lsr.w   r5, r0, r10
 lsl.w   r6, r3, lr
 lsl.w   r4, r2, r4
 orr.w   r7, r5, r4
 it      pl
 lsrpl.w r7, r2, r11
 subs.w  r0, lr, #32
 it      pl
 movpl   r6, #0
 lsl.w   r4, r1, r9
 subs.w  r5, lr, #96
 str     r5, [sp]
 it      pl
 movpl   r4, #0
 cmp.w   lr, #64
 it      lo
 orrlo.w r4, r6, r7
 cmp.w   lr, #0
 lsl.w   r6, r1, lr
 it      eq
 moveq   r4, r3
 cmp     r0, #0
 it      pl
 movpl   r6, #0
 mov     r7, r4
 cmp.w   lr, #64
 it      lo
 orrlo   r7, r6
 lsl.w   r6, r2, lr
 lsr.w   r8, r1, r11
 orr.w   r6, r6, r8
 cmp     r0, #0
 it      pl
 lslpl.w r6, r1, r0
 cmp.w   lr, #64
 it      lo
 orrlo   r7, r6
 ldr     r5, [sp, #4]
 lsr.w   r6, r3, r11
 cmp     r0, #0
 lsr.w   r10, r2, r10
 lsl.w   r9, r2, r9
 lsl.w   r8, r5, lr
 orr.w   r8, r8, r6
 rsb.w   r6, lr, #96
 it      pl
 lslpl.w r8, r3, r0
 cmp.w   r11, #0
 it      pl
 movpl.w r10, #0
 ldr     r5, [sp]
 lsr.w   r6, r1, r6
 orr.w   r6, r6, r9
 cmp     r5, #0
 it      pl
 lslpl.w r6, r1, r5
 cmp.w   lr, #64
 it      lo
 orrlo.w r6, r8, r10
 cmp.w   lr, #0
 ldr     r0, [sp, #4]
 it      eq
 moveq   r6, r0
 lsrs    r5, r4, #8
 cmp     r7, #0
 lsr.w   r7, r6, #7
 orr.w   r5, r5, r6, lsl, #24
 bic.w   r7, r7, r6, lsr, #8
 it      ne
 orrne   r5, r5, #1
 and     r7, r7, #1
 orrs    r2, r0
 subs    r7, r5, r7
 lsrs    r5, r6, #8
 sub.w   r5, r5, r12, lsl, #23
 orr.w   r0, r1, r3
 add.w   r5, r5, #2122317824
 orrs    r0, r2
 it      eq
 lsreq   r5, r6, #8
 add.w   r0, r5, r7, lsr, #31
 add     sp, #8
 pop.w   {r4, r5, r6, r7, r8, r9, r10, r11, pc}
